/**
 * 🔍 모듈
 * 자바스크립트에서 모듈이란 파일 안에 코드를 모듈화해서 작성하는 것을 말한다.
 * 즉 한 모듈이라고 하는 것은 한 파일안에 작성되어 있는 코드를 말하는 것이다.
 * 따로 모듈화해서 작성하지 않으면 여러가지의 파일들이 있다면 이 모든 코드들은 글로벌 스코프로 측정되게 된다.
 * 즉, 파일안에 작성된 모든 함수들은 브라우저 환경이라면 윈도우에 노드환경이라면 글로벌에 다 등록 되어진다.
 *
 * 💩 문제점
 * 각각의 파일에서 동일한 add라는 함수를 구현해 두었다면 이름 충돌이 발생할 확률이 높다.
 * 그리고 아무리 조심해서 작성한다 하더라도 가져다가 쓰는 라이브러리에서 동일한 이름을 작성하는 경우가 있을 수도 있다.
 * 규모가 조금이라도 큰 프로젝트라면 모듈화를 이용해서 코딩을 하는 것이 안전하다.
 *
 * 모듈이라고 하는 것은 코드를 그 파일 내부에서만 한정할 수 있도록 모듈화 할 수 있도록 하는 것을 말한다.
 * 모듈화를 하게 되면 기본적으로는 서로 다른 파일에서는 다른 파일에 있는 것들을 접근하거나 볼 수가 없다.
 * -> 다른 모듈에서 이용하고 싶다면 제공하고자 하는 모듈에서 export를 해 줘야 한다.
 * -> 사용하고자 하는 곳에서 add라는 함수를 import를 해 와야 한다.
 *
 * 모듈을 하려면 html에서 스크립트를 연결할 때 타입을 모듈이라고 정해줘야 한다.
 *
 * ✅ export default
 * 아무 이름이나 우리가 원하는 대로 정의할 수 있다.
 * 한 파일 내에서 두 가지의 default들 쓸 수 없다. 꼭 하나여야 한다.
 * 나머지는 기본으로 export를 해야된다.
 * default는 괄호가 없이 바로 사용이 가능하지만 아닌 것들은 괄호를 이용해서 동일한 이름으로 가져와야 한다.
 *
 * import { print as printMessage } from '';
 * -> print라는 이름을 다른 것으로 변경하고 싶다면 이름 뒤에 as라고 하고 변경할 이름을 적어주면 이제 변경된 이름으로 호출 할 수가 있다.
 *
 * ✅ export되는 것들을 calculator로 받아올 때 -> import * as calculator from '';
 *
 * ⭐️ 이처럼 모듈화를 이용하면 파일들간의 중복적으로 발생할 수 있는 이름 충돌을 방지할 수 있고
 * 서로 간의 코드를 분리함으로써 모듈성을 높여준다. 그리고 모듈간의 재사용성도 높여준다. ⭐️
 */

export function add(a, b) {
  return a + b;
}

export const number = 10;
export function print() {
  console.log('print');
}
